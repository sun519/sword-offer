// 这里需要明确的是反转链表不涉及数值的交换，只涉及指针的方向改变
// 例:1->2->3->4->5变成1<-2<-3<-4<-5这里只改变指针方向 而不是说变成5->4->3->2->1这里是数字位置变了指针方向没变。这两者注意区分
function ReverseList(pHead) {
    // 如果链表为空 返回返回false
    if(pHead === null) {
        return false;
    }
    // 定义三个变量 当前节点p1,定义pro为p1的前一个节点，temp临时存储当前节点p1的下一个节点
    var p1 = pHead;
    var pre = null;
    var temp = null;
    // 这里千万不要写p.next === null,这么写输出长度在原来长度基础上-1
    while(p1 != null) {
        temp = p1.next;
        // 反转当前节点指针方向（指向当前节点的前一个节点）
        p1.next = pre;
        // pro、p1向后移动,继续再反转后面的指针
        pre = p1;
        p1 = temp;
    }
    return pre;
}
console.log(ReverseList({1,2,3,4,5}))



//实际测试写法 包含创建链表
// 定义Node类表示节点 val用来保存节点数据,next用来指向下一个节点链接
function Node(val) {
    this.val = val;
    this.next = null;
}

// 定义LList类提供了对链表进行操作的方法 例如查找插入显示等(这里定义的是一个带头节点的单链表,头结点的val值是h)
function LList() {
    // 定义一个头节点,头结点的val值是head
    this.head = new Node("h");
}
// 查找方法
LList.prototype.find = function(item) {
    var curNode = this.head;
    while(curNode.val != item) {
        curNode = curNode.next;
    }
    return curNode;
}
// 插入
LList.prototype.insert = function(newVal, item) {
    // 定义可选参数par_item,因为par_item参数时第二个设置的,所以写arguments[1]
    var par_item = arguments[1] ? arguments[1] : null;
    var newNode = new Node(newVal);
    // 如果调用insert方法时未写par_item,则默认从链表的最后一个节点开始插入
    if(par_item === null) {
        var current = this.head;
        // 插入点用while来判断,如果当前链表的节点的next是null,则该节点必然是当前链表的最后一个节点
        while(current.next !== null) {
            current = current.next;
        }
        newNode.next = current.next;
        current.next = newNode;
        //console.log(newNode.val)
        return;  
    }
    // 如果调用insert方法时写item时的调用
    var current = this.find(item);
    newNode.next = current.next;
    current.next = newNode;
    //console.log(newNode.val)
}
// 显示
LList.prototype.display = function() {
    var curNode = this.head;
    while(curNode.next !== null) {
        console.log(curNode.next.val);
        curNode = curNode.next;
    }
}
// 查找上一个节点,这里一般配合删除节点用
LList.prototype.findPrevious = function(item) {
    var current = this.head;
    // 当current.next.val === item时跳出循环,此时item的前驱节点就是current
    //while(current.next.val !== item && current.next !== null) {
    while(current.next.val !== item && current.next !== null) {
        current = current.next;
    }
    return current;
}
// 删除
LList.prototype.remove = function(item) {
    var prevNode;
    var item = arguments[0] ? arguments[0] : null;
    // 如果调用remove方法时未写item参数,则默认从链表的最后一个节点开始删除
    if(item === null) {
        // 遍历出链表的最后一个节点
        var cur = this.head;
        while(cur.next !== null) {
            cur = cur.next;
        }
        // 将最后一个节点的val值赋值给item。这里cur是节点而不是值,所以获取值要写成cur.val
        item = cur.val;
        prevNode = this.findPrevious(item);
        if(prevNode.next !== null) {
            prevNode.next = prevNode.next.next;
            return;
        }
    }
    // 如果调用remove方法时写item时的调用
    prevNode = this.findPrevious(item);
    if(prevNode.next !== null) {
        prevNode.next = prevNode.next.next;
        return;
    }
}

// 创建一个链表实例
var pHead = new LList();
var arr = [1,2,3,4,5,6];
for(var i = 0; i < arr.length; i++) {
    pHead.insert(arr[i]);
}
console.log(pHead);
pHead.display();

// 反转链表函数
function ReverseList(linklist) {
    // 如果链表为空(事实上此处链表不可能为空,因为我上面链表的创建的是一个带头结点的单链表) 返回返回false
    if(linklist === null) {
        return false;
    }
    // 定义三个变量 当前节点p1,定义pro为p1的前一个节点，temp临时存储当前节点p1的下一个节点
    var p1 = linklist.head;
    var pre = null;
    var temp = null;
    // 这里千万不要写p.next === null,这么写输出长度在原来长度基础上-1
    while(p1 != null) {
        temp = p1.next;
        // 反转当前节点指针方向（指向当前节点的前一个节点）
        p1.next = pre;
        // pro、p1向后移动,继续再反转后面的指针
        pre = p1;
        p1 = temp;
    }
    return pre;
}
console.log(ReverseList(pHead))