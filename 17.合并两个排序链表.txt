// 递归写法
function Merge(pHead1, pHead2)
{
    if(pHead1 === null || pHead2 === null) {
        return pHead1 === null ? pHead2 : pHead1;
    }
    // 链表1的值小于等于链表2的值
    if(pHead1.val <= pHead2.val) {
        // 链表1的next递归调用
        pHead1.next = Merge(pHead1.next,pHead2);
        return pHead1;
    // 链表1的值大于链表2的值
    }else if(pHead1.val > pHead2.val) {
        pHead2.next = Merge(pHead1,pHead2.next);
        return pHead2;
    }
}
console.log(Merge([1,3,5,7],[2,4,6,8]))

// 非递归写法
function Merge(pHead1, pHead2)
{
    var result = null;
    var current = null;
    if(pHead1 === null) {
        return pHead2;
    }
    if(pHead2 === null) {
        return pHead1;
    }
    while(pHead1 != null && pHead2 != null) {
        if(pHead1.val <= pHead2.val) {
            if(result === null) {
                result = pHead1;
                current = pHead1;
            }else {
                current.next = pHead1;
                current = current.next;
            }
        }        
        pHead1 = pHead1.next;
        if(pHead1.val > pHead2.val) {
            if(result === null) {
                result = pHead2;
                current = pHead2;
            }else {
                current.next = pHead2;
                current = current.next;
            }
        }
        pHead2 = pHead2.next;
    }
    if(pHead1 === null) {
        current.next = pHead2;
    }
    if(pHead2 === null) {
        current.next = pHead1;
    }
    return result;
}
