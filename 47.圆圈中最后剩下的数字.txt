// 方法一 约瑟夫环(递归实现)
function LastRemaining_Solution(n, m) {
    if(n === 0) {
        return -1;
    }
    if(n === 1) {
        return 0;
    }
    return (LastRemaining_Solution(n-1, m)+m) % n;
}
console.log(LastRemaining_Solution(5, 3))

// 约瑟夫环(非递归实现)
function LastRemaining_Solution(n, m) {
    if(n === 0) {
        return -1;
    }
    if(n === 1) {
        return 0;
    }
    var last = 0;
    for(var i = 2; i <= n; i++) {
        last = (last + m) % i;
    }
    return last;
}
console.log(LastRemaining_Solution(5, 3))

// 方法二 数组模拟链表过程

function LastRemaining_Solution(n, m) {
    if(n < 1 || m < 1) {
        return -1;
    }
    var arr = [],
        step = 0,
        i = -1,
        count = n;
    while(count !== 0) {
        i++; // 指向上一个被删除对象的下一个元素
        if(i >= n) { // 模拟环
            i = 0;
        }
        if(arr[i] === -1) { // 跳过被删除对象
            continue;
        }
        step++;
        if(step === m) { // 找到待删除对象
            arr[i] = -1;
            step = 0;
            count--;
        }
    }
    return i; // 此时跳出循环的i就是最后一个数
}

console.log(LastRemaining_Solution(5, 3))